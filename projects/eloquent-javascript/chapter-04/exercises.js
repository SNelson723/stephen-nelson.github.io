////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(a, b, step = 1) {
  let sequence = [];
  if (a < b && step > 0) {
    for (let i = a; i <= b; i += step) {
      sequence.push(i);
    }
  } else if (a > b && step < 0) {
      for (let i = a; i >= b; i -= step) {
        sequence.push(i);
      }
  }
  return sequence;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array, sum = 0) {
  for (let i = 0; i < array.length; i++) {
    sum += array[i];
  }
  return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array, reversed = []) {
  for (let i = array.length - 1; i >= 0; i--) {
    reversed.push(array[i]);
  }
  return reversed;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let temp = [];
  for (let i = array.length - 1; i >= 0; i--) {
    temp.push(array[i]);
    array.pop(array[i]);
  }
  for (let i = 0; i < temp.length; i++) {
    array.push(temp[i]);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;
  for (let i = array.length - 1; i >= 0; i--) {
    rest = {value: array[i], rest: rest}
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array = []) {
  // base
  if (list.rest === null) {
    array.push(list.value);
    return array;
  }
  //recursion
  array.push(list.value);
  return listToArray(list.rest, array);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  //create a new object and initialize value property with the value argument
  let newList = {
    value,
    rest: list //rest property contains the arrayToList function which extends the list beyond the new value
  };
  //return new object with the value argument at the beginning of the list
  return newList;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) { //discuss on Monday
  //if num === 0
  if ( num === 0) {
      // return current value of value property
      return list.value;
    //if num > 0
  } else if (num > 0) {
      //keep iterating through the rest lists until the specified value is reached
      return nth(list.rest, num - 1); //num acts as a recursive anchor to find specific values
  } else {
    //if num given doesn't point to a defined value property, return undefined
      return undefined;
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(obj1, obj2) {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
