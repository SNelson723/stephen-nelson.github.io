// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  //return flattened array starting with reduce
  return array.reduce((previous, current) => {
    //use the nested function to concat each sub array
    return previous.concat(current);
  });

}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  // base
  if (!test(value)) {
    //exit function if test returns false
    return;
  }
  // recursion
  body(value); //execute body function
  value = update(value); //update the current value
  return loop(value, test, update, body); //return the function call
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  //iterate through array
  for (let i = 0; i < array.length; i++) {
    //determine if any of the elements return a false test
    if(!test(array[i])) {
      //return false
      return false;
    }
  }
  //if all elements pass => return true
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
  let ltr = [];
  let rtl = [];
  for (let i = 0; i < string.length; i++) {
    //declare variable named script
    let script = characterScript(string.charCodeAt(i));
    if (script !== null) {
      if (script.direction === "ltr") {
        ltr.push(script);
      } else {
        rtl.push(script);
      }
    }
  }
  if (ltr.length > rtl.length) {
    return "ltr";
  } else {
    return "rtl";
  }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
